#!/bin/bash

## This is what git deploy init might do?

git config --add deploy.tag-prefix git-deploy-demo
git config --add deploy.deploy-file .deploy



##
## Okay, so it might not do this, in this way - i.e. it would be easier to be 
## perl, cp, unpack from somewhere...
## 

## some hash table hackery using directory and file based hash...
function hinit {
    rm -rf /tmp/hashmap.$1
    mkdir -p /tmp/hashmap.$1
}
function hput {
    mkdir -p /tmp/hashmap.$1/$2
    printf "$3" > "/tmp/hashmap.$1/$2/value"
}
function hget {
    cat /tmp/hashmap.$1/$2/value 2>/dev/null
}
function hkeys {
    ls -1 /tmp/hashmap.$1
}
function hdestroy {
    rm -rf /tmp/hashmap.$1
}

## initialise the hash
hinit phase-doc
hput phase-doc pre-start "The first hook to be executed. Will be run before the deployment tag
## is created (but obviously, after we do git fetch)."
hput phase-doc post-start "Executed after the start phase (also executed on hotfix), useful to
## e.g. print out any custom messages you'd like to print out at the end of the
## start/hotfix phase."
hput phase-doc pre-pull "Executed before we update the working tree with git pull. This is 
## where hooks that e.g. take the deployment machine out of the load balancer 
## should be executed."
hput phase-doc post-pull "Just after the pull in the \"start\" phase."
hput phase-doc pre-sync "Just before we create the tag we're about to sync out and execute 
## the deploy/sync/\$app.sync hook."
hput phase-doc post-tag "Run right after we've created and are about to push a tag.
##
## Useful for e.g. updating some foreign system saying that we're trying to 
## rollout this tag. Will have \"GIT_DEPLOY_ROLLOUT_TAG\" set with the tag name
## we've just created."
hput phase-doc post-sync "After we've finished the sync phase.
##
## Note, this'll currently run even on failure. 
## See https://github.com/git-deploy/git-deploy/issues/27 for an issue filed for
## that."
hput phase-doc post-finish "Run on finish. Here you could e.g. send custom e-mails 
## indicating that the deployment was a success."
hput phase-doc post-abort "Hooks executed after an abort."
hput phase-doc post-reset "Hooks executed after a reset, either via abort or revert.
## Most of the time you want to use post-tree-update hooks instead, but this is
## useful e.g. for putting a staging server back into a load balancer."
hput phase-doc post-tree-update "Executed after we update the working tree to a new revision, 
## whether that's after the pull in the start phase, after git reset --hard in 
## the abort phase, or after a revert.
## 
## Here's where hooks that e.g. restart the webserver and run any critical tests
## (e.g. config tests) should be run.
##
## The exit code from these hooks is ignored in actions like abort and revert. 
## We don't want the abort or revert to fail just because a web server didn't
## restart."
hput phase-doc log "Called at various points with log messages, these are 
## just like normal phase hooks except they'll have a few extra environment 
## variables set for them. By default we ignore the exit code of log hooks, 
## because we don't want failure in logging to stop the deployment.
##
## GIT_DEPLOY_LOG_LEVEL
## The log level, the lowercase equivalent of the levels documented in syslog(3)
## without the LOG_* prefix, e.g. \"info\" or \"warning\".
##
## GIT_DEPLOY_LOG_MESSAGE
## A free-form log message that we're passing to the log hook
##
## GIT_DEPLOY_LOG_ANNOUNCE
## Whether this message should be announced. These are messages that are more 
## important than others that you'd e.g. like to output to your IRC or Jabber
## deployment channel."


##
## use the hash to create some text
for phase in $(hkeys phase-doc);
do
    hook=deploy/apps/common/$phase.001.example.sh
    timing=`hget phase-doc $phase`
    cat - <<EOF > "$hook"
#!/bin/bash
##
## $phase phase hook
##
## Timing: $timing

##
## The following environment variables are available to this hook:
##
## GIT_DEPLOY_ACTION
## The current action we're running, e.g. "start", "hotfix", "abort" etc.
##
## GIT_DEPLOY_PHASE
## The current hook phase, e.g. "post-pull", "pre-sync" etc.
## 
## GIT_DEPLOY_PREFIX
## The prefix of the current environment, e.g. "sheep", "cron" etc.
##
## GIT_DEPLOY_HOOK_PREFIX
## The prefix of the currently executing hook, like "GIT_DEPLOY_PREFIX" except 
## this will be "common" when the "common" hooks are being executed.
##
## GIT_DEPLOY_START_TAG
## Set to the tag we started with, currently only set (and can only ever be set)
## for a subset of the hooks.
##
## GIT_DEPLOY_ROLLOUT_TAG
## The tag we're rolling out, like "GIT_DEPLOY_START_TAG" this isn't set for all
## hooks.


exit 0
EOF

done

hdestroy phase-doc


exit 0
